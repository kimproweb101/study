import{_ as i,c as a,o as l,ae as t}from"./chunks/framework.DAUS992W.js";const d=JSON.parse('{"title":"","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"gym/advanced/s08.md","filePath":"gym/advanced/s08.md"}'),e={name:"gym/advanced/s08.md"};function n(p,s,h,r,k,o){return l(),a("div",null,s[0]||(s[0]=[t(`<h2 id="개념" tabindex="-1">개념 <a class="header-anchor" href="#개념" aria-label="Permalink to &quot;개념&quot;">​</a></h2><p>상태 관리가 포함되는 함수</p><h2 id="axios-컴포저블-함수-구현1" tabindex="-1">axios 컴포저블 함수 구현1 <a class="header-anchor" href="#axios-컴포저블-함수-구현1" aria-label="Permalink to &quot;axios 컴포저블 함수 구현1&quot;">​</a></h2><p>특정 시나리오를 가정하여 axios 로 통신하는 부분을 composable 로 구현 데이터를 성공적으로 조회했을때 목록 ui 보여주기 실패했을 경우 error 문구 보여주기</p><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">AppLoading</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> v-if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;loading&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">AppError</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> v-else-if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;error&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> :message</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;error.message&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> v-else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Posts</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> loading</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> error</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> posts</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([]);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fetchPost</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    posts.value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getPosts</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (err) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    error.value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> err;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">finally</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    loading.value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h2 id="axios-컴포저블-함수-구현2" tabindex="-1">axios 컴포저블 함수 구현2 <a class="header-anchor" href="#axios-컴포저블-함수-구현2" aria-label="Permalink to &quot;axios 컴포저블 함수 구현2&quot;">​</a></h2><p>1.hooks/useAxios.js</p><h2 id="작업-순서" tabindex="-1">작업 순서 <a class="header-anchor" href="#작업-순서" aria-label="Permalink to &quot;작업 순서&quot;">​</a></h2><h3 id="alert-공통-컴포넌트" tabindex="-1">Alert 공통 컴포넌트 <a class="header-anchor" href="#alert-공통-컴포넌트" aria-label="Permalink to &quot;Alert 공통 컴포넌트&quot;">​</a></h3><p>Step1 1./components/AppAlert.vue</p><ul><li>부트스트랩에서 alert 복사 후 출력해보기</li><li>show Props 객체 형태로 선언, type 및 default 값 지정 후 v-if 로 넣어주기</li><li>.app-alert 으로 오른쪽 상단에 출력하기</li><li>success, alert-danger 분기처리-validator 처리, stylClass computed</li><li></li></ul><p>2.PostEditView.vue</p><ul><li>컴포넌트 가져와서 출력하기 (div태그 끝나는 부분 앞에)</li><li>showAlert 반응형 상태 선언하고 default 값 선언</li><li>vAlert 함수 작성 - showAlert 값 true 로 변경 출력해보기</li><li>2초 후 사라지게 하기</li><li>서버 연결이 끊어 졌을때 error message 보여주기</li><li>alertType 상태 선언 vAlert 함수의 인자에 type=&#39;error&#39; 을 설정 type prop 넘겨주기</li></ul><p>Step2 transition trnasition 컴포넌트의 트리거</p><p>1./components/AppAlert.vue</p><ul><li>transition 감싸기</li><li>나타나고 사라질때 클래스 적용</li><li>v-enter-from 0 v-enter-to 1</li><li>v-enter-active opacity 0.5s ease; 0.5초간 효과 주기</li><li>v-leave-from v-leave-to 콤마로 enter 와 같이 입력, v-leave-active 도 같이 사용</li><li>slide 효과 변경 - transform:translateY(-30px) transform:translateY(0)</li><li>slide-enter-active : all 0.5s ease transition 효과가 모두 적용되야 해서 all로 작성</li><li>classStyle -&gt; typeStyle 로 변수명 수정</li></ul><p>Step3 transition group 1./components/AppAlert.vue</p><ul><li>fixed 부모로 보내고, 자식 3개 만들고 테스트 하기</li><li>props 로 자식 여러개 받기</li><li>items props 에서 message, type 을 구조분해 할당으로 받기</li><li>type 은 computed 로 할 수 없어, 함수로 작성후 반복문에서 함수에 type 전달</li><li>TransitionGroup 작성시 주의사항-반복되는 목록을 감싸야함</li></ul><h3 id="composable-alert-컴포저블-함수" tabindex="-1">Composable Alert 컴포저블 함수 <a class="header-anchor" href="#composable-alert-컴포저블-함수" aria-label="Permalink to &quot;Composable Alert 컴포저블 함수&quot;">​</a></h3><p>1.개념 상태 저장 비즈니스 로직을 캡슐화 하고 재사용 하는 기능</p><p>2.수정 alert 등록에 적용하기 PostEditView.vue PostCreateView.vue</p><p>AppAlert 컴포넌트 등록화면에 복붙 AppAlert 컴포넌트 로직 복붙 라우터 주석 vAlert 함수 사용 vSuccess 함수로 vAlert 함수에 메시지 생략하도록 작업 수정으로 문구 변경</p><ol start="3"><li>2번을 컴포저블로 변경</li></ol><p>3-1 composables/alert.js useAlert 함수 작성, 코드 복붙, ref 함수 가져오기 사용할 변수와 함수 리턴, 외부에서 사용할수 있도록 export하기</p><p>3-2 PostCreateView 컴포저블 함수 사용</p><ul><li>alert 컴포저블에서 사용할 함수 가져오기</li></ul><p>3-3 수정 화면에서 사용하기</p><p>3-4 수정화면 다른페이지로 이동시 alert 메시지가 안나오는이유 alert 컴포넌트는 PostEditView 안에 있는데 PostEdit View 에서 저장 후 이동시 자식 컴포넌트가 소멸이 되기 때문 호출은 됐으나, 바로 이동해서 안보임</p><p>3-5 Alert 컴포넌트를 App.vue로 이동</p><ul><li>useAlert 함수 및 alerts 상태 가져오기</li><li>작동하지 않는 이유와 임시 해결 방법</li></ul><h3 id="axios-컴포저블-함수-구현-1" tabindex="-1">axios 컴포저블 함수 구현 1 <a class="header-anchor" href="#axios-컴포저블-함수-구현-1" aria-label="Permalink to &quot;axios 컴포저블 함수 구현 1&quot;">​</a></h3><p>1./components/AppError.vue</p><p>2./components/AppLoading.vue 부트스트랩 중앙 정렬된 스피너</p><p>3./views/PostListView.vue</p><ul><li>컴포넌트 분기문</li><li>AppError :message=&quot;Error!!&quot; 메시지 props 로 내리기</li><li>상태 선언 error loading</li><li>조회 시작시 조회 완료시 처리</li><li>조회 실패시 에러 띄우기 err error 구분</li><li>json server delay 추가 --delay 1000</li><li>template 으로 pagenation 까지 감싸기</li><li>const error 상태와 로딩 상태 적용</li><li>수정 컴포넌트에도 적용하기</li></ul><h3 id="axios-컴포저블-함수-구현-2" tabindex="-1">axios 컴포저블 함수 구현 2 <a class="header-anchor" href="#axios-컴포저블-함수-구현-2" aria-label="Permalink to &quot;axios 컴포저블 함수 구현 2&quot;">​</a></h3><p>1.hooks/useAxios.js 파일생성</p><ul><li>axios 가져오기</li><li>기본 url 설정</li><li>useAxios 함수 외부 사용 설정</li><li>사용할 변수 선언</li><li>axios then catch 작성- url,config 구조로 작성, 변수 리턴</li><li>url config 외부에서 받기 및 기본값 설정으로 에러 방지</li><li>params 넘겨주기</li><li>params 가 반응형 객체 이기 때문에 안나오기 떄문에 랩핑을 풀어줘야한다</li><li>useAxios 함수에서 watchEffect 적용</li><li>useAxios default method get 설정</li><li>params 가 반응형 객체인 경우와 일반 객체인 경우 execute 함수를 한번만 호출</li></ul><ol start="2"><li>등록</li></ol><ul><li>등록함수가 호출 됐을때 useAxios 호출, <code>method:post, data: {...form.value, createdAt:Date.now()}</code></li><li>성공했을때, 실패했을때 처리, 함수 보내고, 받기</li></ul>`,40)]))}const g=i(e,[["render",n]]);export{d as __pageData,g as default};
